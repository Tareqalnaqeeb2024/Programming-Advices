#pragma once
#include <iostream>
#include <string>
#include "clsPerson.h"
#include "clsString.h"
#include <vector>
#include <fstream>

using namespace std;
class clsBankClient : public clsPerson
{
private:

	enum enMode { EmptyMode = 0, UpdateMode = 1, AddNewClientMode=2 };
	enMode _Mode;
	string _AccountNumber;
	string _PinCode;
	float _AccountBalance;
	bool _MarkForDelete = false;

	static clsBankClient _ConvertLinetoClientObject(string Line, string Seperator = "#//#")
	{
		vector<string> vClientData;
		vClientData = clsString::Split(Line, Seperator);

		return clsBankClient(enMode::UpdateMode, vClientData[0], vClientData[1], vClientData[2],
			vClientData[3], vClientData[4], vClientData[5], stod(vClientData[6]));

	}





	static clsBankClient _GetEmptyClientObject()
	{
		return clsBankClient(enMode::EmptyMode, "", "", "", "", "", "", 0);
	}
	static vector<clsBankClient>  _LoadClientDateFromFile()
	{
		vector<clsBankClient> vClient;
		fstream MyFlie;
		MyFlie.open("Client.txt", ios::in);
		
		if (MyFlie.is_open())
		{
			string Line;
			while (getline(MyFlie,Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				vClient.push_back(Client);

			}

			MyFlie.close();
		}
		return vClient;

	}
	static string _ConverClientObjectToLine(clsBankClient Client, string Seperator = "#//#")
	{

		string stClientRecord = "";
		stClientRecord += Client.FristName + Seperator;
		stClientRecord += Client.LastName + Seperator;
		stClientRecord += Client.Email + Seperator;
		stClientRecord += Client.Phone + Seperator;
		stClientRecord += Client.AccountNumber() + Seperator;
		stClientRecord += Client.PinCode + Seperator;
		stClientRecord += to_string(Client.AccountBalance);

		return stClientRecord;

	}
	static void _SaveClientDateToFlie(vector <clsBankClient> vClient )
	{
		fstream MyFlie;
		MyFlie.open("Client.txt", ios::out);

		string DateLine;

		if (MyFlie.is_open())
		{
			for (clsBankClient C : vClient)
			{
				if (C.MarkForDelete() == false)
				{
					DateLine = _ConverClientObjectToLine(C);
					MyFlie << DateLine << endl;

				}
				
			}
			MyFlie.close();
		}
		


	}
	 void _AddDataLineToFlie(string DataLine)
	{
		fstream MyFlie;
		MyFlie.open("Client.txt", ios::out | ios::app);

		if (MyFlie.is_open())

		{
			MyFlie << DataLine << endl;
			MyFlie.close();

		}

	}

	 void AddNewClient()
	{
		_AddDataLineToFlie(_ConverClientObjectToLine(*this));
	}
	void _Update()
	{
		vector<clsBankClient> _vClient;
		_vClient = _LoadClientDateFromFile();
		
		for (clsBankClient& C : _vClient)
		{
			if (C.AccountNumber() == AccountNumber())
			{
				 C = *this;
				 break;

			}
		}
		_SaveClientDateToFlie(_vClient);
	}

public:


	clsBankClient(enMode Mode, string FirstName, string LastName,
		string Email, string Phone, string AccountNumber, string PinCode,
		float AccountBalance) :
		clsPerson(FirstName, LastName, Email, Phone)

	{
		_Mode = Mode;
		_AccountNumber = AccountNumber;
		_PinCode = PinCode;
		_AccountBalance = AccountBalance;

	}

	bool IsEmpty()
	{
		return (_Mode == enMode::EmptyMode);
	}
	bool MarkForDelete()
	{
		return _MarkForDelete;

	}

	string AccountNumber()
	{
		return _AccountNumber;
	}

	void SetPinCode(string PinCode)
	{
		_PinCode = PinCode;
	}

	string GetPinCode()
	{
		return _PinCode;
	}
	__declspec(property(get = GetPinCode, put = SetPinCode)) string PinCode;

	void SetAccountBalance(float AccountBalance)
	{
		_AccountBalance = AccountBalance;
	}

	float GetAccountBalance()
	{
		return _AccountBalance;
	}
	__declspec(property(get = GetAccountBalance, put = SetAccountBalance)) float AccountBalance;

	void Print()
	{
		cout << "\nClient Card:";
		cout << "\n___________________";
		cout << "\nFirstName   : " << FristName;
		cout << "\nLastName    : " << LastName;
		cout << "\nFull Name   : " << FullName();
		cout << "\nEmail       : " << Email;
		cout << "\nPhone       : " << Phone;
		cout << "\nAcc. Number : " << _AccountNumber;
		cout << "\nPassword    : " << _PinCode;
		cout << "\nBalance     : " << _AccountBalance;
		cout << "\n___________________\n";

	}

	static clsBankClient Find(string AccountNumber)
	{


		fstream MyFile;
		MyFile.open("Client.txt", ios::in);//read Mode

		if (MyFile.is_open())
		{
			string Line;
			while (getline(MyFile, Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				if (Client.AccountNumber() == AccountNumber)
				{
					MyFile.close();
					return Client;
				}

			}

			MyFile.close();

		}

		return _GetEmptyClientObject();
	}

	static clsBankClient Find(string AccountNumber, string PinCode)
	{



		fstream MyFile;
		MyFile.open("Client.txt", ios::in);//read Mode

		if (MyFile.is_open())
		{
			string Line;
			while (getline(MyFile, Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				if (Client.AccountNumber() == AccountNumber && Client.PinCode == PinCode)
				{
					MyFile.close();
					return Client;
				}

			}

			MyFile.close();

		}
		return _GetEmptyClientObject();
	}




	static bool IsClientExist(string AccountNumber)
	{

		clsBankClient Client1 = clsBankClient::Find(AccountNumber);
		return (!Client1.IsEmpty());
	}

	enum enSaveReslute {enFaliedEmptyClientObject =0 ,enSucsecceded=1, enFailedAccountNumberExsits=2 };

	enSaveReslute Save()
	{
		switch (_Mode)
		{
		case enMode::EmptyMode:
		{
			return enSaveReslute::enFaliedEmptyClientObject;
			break;
		}

		case enMode::UpdateMode:
		{
			return enSaveReslute::enSucsecceded;
			_Update();

			break;

		}
		case enMode::AddNewClientMode:
		{
			if (clsBankClient::IsClientExist(_AccountNumber))
			{
				return enSaveReslute::enFailedAccountNumberExsits;

			}
			else
			{
				AddNewClient();
				//We need to set the mode to update after add new
				_Mode = enMode::UpdateMode;
				return enSaveReslute::enSucsecceded;
			}

			break;

		}
		}

	}

	bool Delete()
	{
		vector <clsBankClient> Vclient;

		Vclient = _LoadClientDateFromFile();

		for (clsBankClient& C : Vclient)
		{
			if (C.AccountNumber() == _AccountNumber)
			{
				C._MarkForDelete = true;
				break;
			}
		}
		_SaveClientDateToFlie(Vclient);
		*this = _GetEmptyClientObject();
		return true;


	}

	static clsBankClient GetAddNewClient(string AccountNumber)
	{
		return clsBankClient(enMode::AddNewClientMode, "", "", "", "", AccountNumber, "", 0);
	}

	static vector <clsBankClient> GetClientList()
	{
		return _LoadClientDateFromFile();
	}

	static double ShowTotalBalance()
	{
		vector<clsBankClient> vClient = _LoadClientDateFromFile();
		double TotalBlance = 0;

		for (clsBankClient Client : vClient )
		{
			TotalBlance += Client.AccountBalance;
		}

		return TotalBlance;

	}





};

