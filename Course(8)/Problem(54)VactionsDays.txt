// ConsoleApplication4.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


#include <iostream>


using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;

};
short ReadYear()
{
	int Year;
	cout << " Please enter number  Of Year ? \n";
	cin >> Year;
	return Year;
}
short ReadMonth()
{
	short Month;
	cout << "please enetr number of month ?\n";
	cin >> Month;
	return Month;
}

short ReadDay()
{
	short Day;
	cout << " please enter number of day ? \n";
	cin >> Day;
	return Day;
}

short ReadAddingDays()
{
	short Day;
	cout << " please enter number of day to adding  ? \n";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Year = ReadYear();
	Date.Month = ReadMonth();
	Date.Day = ReadDay();

	return Date;
}



bool IsLeapYear(int Number)
{

	return (Number % 4 == 0 && Number % 100 != 0 || Number % 400 == 0);


}

short NumberOfDaysInMonth(short Month, short Year)
{
	if (Month < 1 || Month > 12)
	{
		return 0;
	}

	int DaysOfMonth[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	for (short i = 1; i <= 12; i++)
	{
		return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : DaysOfMonth[Month - 1];



	}
}
short DayOFWeekOrder(short Day, short Month, short Year)

{



	short a, y, m, d;

	a = (14 - Month) / 12;

	y = Year - a;

	m = Month + (12 * a) - 2;

	d = (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;

	return d;


}

bool IsDate1BeforeDate2(sDate Date1, sDate Date2)
{

	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
		(Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);

}






bool IsLastDay(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));

}

bool IsLastMonth(short Month)
{
	return (Month == 12);
}



sDate IncreasingDateByOne(sDate Date)
{
	if (IsLastDay(Date))
	{
		if (IsLastMonth(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}

	}
	else
	{
		Date.Day++;
	}

	return Date;

}

void SweapDate(sDate & Date1, sDate & Date2)
{
	sDate TemDate;
	TemDate.Year = Date1.Year;
	TemDate.Month = Date1.Month;
	TemDate.Day = Date1.Day;

	Date1.Year = Date2.Year;
	Date1.Month = Date2.Month;
	Date1.Day = Date2.Day;


	Date2.Year = TemDate.Year;
	Date2.Month = TemDate.Month;
	Date2.Day = TemDate.Day;
}


short DayOfWeekOrder(sDate Date)
{
	return DayOFWeekOrder(Date.Day, Date.Month, Date.Year);

}

string  DayOFWeekName(short DayOfWeekOrder)
{
	string DaysOfWeek[] = { "Sun" , "Mon" , " Tues" , " Wed" ," Thu" , "Fri", " Sat" };

	return DaysOfWeek[DayOfWeekOrder];
}



bool IsWeekEndDay(sDate Date)
{
	short EndDay = DayOfWeekOrder(Date);
	return (EndDay == 4 || EndDay == 5);
}
bool IsBusinessDay(sDate Date)
{
	return !IsWeekEndDay(Date);
}

int GetVactionsDays(sDate DateFrom, sDate DateTo)
{
	int Days = 0;
	
	while (IsDate1BeforeDate2(DateFrom, DateTo) )
	{
		if (IsBusinessDay(DateFrom))
		
			Days++;
			DateFrom = IncreasingDateByOne(DateFrom);

		
		
		
		
	}
	
	return Days;

}








int main()
{
	sDate DateFrom = ReadFullDate();
	sDate DateTo = ReadFullDate();


	cout << " Strating vaction date  :" <<DayOFWeekName(DayOfWeekOrder(DateFrom)) ;
	cout << DateFrom.Day << " / " << DateFrom.Month << " /" << DateFrom.Year << endl;
	//------------------------//
	cout << " Strating vaction date  :" << DayOFWeekName(DayOfWeekOrder(DateTo));
	cout << DateTo.Day << " / " << DateTo.Month << " /" << DateTo.Year << endl;

	//----------------//

	cout << " Days Of vaction : " << GetVactionsDays(DateFrom, DateTo);




	system("pause>0");

	return 0;
}