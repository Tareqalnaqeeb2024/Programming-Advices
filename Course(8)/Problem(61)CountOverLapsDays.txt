


#include <iostream>


using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;

};

struct stPeriod
{
	sDate StratDate;
	sDate EndDate;

};

bool IsLeapYear(int Number)
{

	return (Number % 4 == 0 && Number % 100 != 0 || Number % 400 == 0);


}

short NumberOfDaysInMonth(short Month, short Year)
{
	if (Month < 1 || Month > 12)
	{
		return 0;
	}

	int DaysOfMonth[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	for (short i = 1; i <= 12; i++)
	{
		return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : DaysOfMonth[Month - 1];



	}
}



short NumberOfDaysFromBagainingOfYear(short Day, short Month, short Year)
{
	short TotalDays = 0;

	for (int i = 1; i <= Month - 1; i++)
	{

		TotalDays += NumberOfDaysInMonth(i, Year);


	}

	TotalDays += Day;

	return TotalDays;
}



bool IsDate1EqualsDate2(sDate Date1, sDate Date2)
{



	return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;

}


bool IsDate1BeforeDate2(sDate Date1, sDate Date2)
{

	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
		(Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);




}
bool IsDate1AfterDate2(sDate Date1, sDate Date2)
{
	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualsDate2(Date1, Date2));
}





bool IsLastDay(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));

}

bool IsLastMonth(short Month)
{
	return (Month == 12);
}



sDate IncreasingDateByOne(sDate Date)
{
	if (IsLastDay(Date))
	{
		if (IsLastMonth(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}

	}
	else
	{
		Date.Day++;
	}

	return Date;

}

int GetDiffranceBetweenDate1AndDate2(sDate Date1, sDate Date2, bool EnculdeEndDay = false)
{
	int Days = 0;
	while (IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreasingDateByOne(Date1);



	}
	return (EnculdeEndDay) ? ++Days : Days;
}







enum  enCompare
{
	Before = -1, Equal = 0, After = 1

};
enCompare CompareFunctions(sDate Date1, sDate Date2)
{

	if (IsDate1BeforeDate2(Date1, Date2))
		return	enCompare::Before;
	if (IsDate1EqualsDate2(Date1, Date2))
		return enCompare::Equal;
	if (IsDate1AfterDate2(Date1, Date2))
		return enCompare::After;
	// is faster
//return enCompare::After;





}
int PeriodLenghtInDays(stPeriod Period, bool IncludeLastDay = false)
{
	return GetDiffranceBetweenDate1AndDate2(Period.StratDate, Period.EndDate, IncludeLastDay);
}

bool IsOverlapDate(stPeriod Period1, stPeriod Period2)
{


	if (
		CompareFunctions(Period2.EndDate, Period1.StratDate) == enCompare::Before
		||
		CompareFunctions(Period2.StratDate, Period1.EndDate) == enCompare::After
		)


		return false;

	else

		return true;
}
bool IsDateInPeriod( sDate Date ,stPeriod Period1 )
{


	return !(
		CompareFunctions(Date, Period1.StratDate) == enCompare::Before
		||
		CompareFunctions(Date, Period1.EndDate) == enCompare::After
		);

}
int CountOverLapsDays(stPeriod Period1, stPeriod Period2)
{
	int Period1Lenght = PeriodLenghtInDays(Period1, true);
	int Period2Lenght = PeriodLenghtInDays(Period2, true);
	int CountOverLap = 0;

	if (!IsOverlapDate(Period1, Period2))

		return 0;

	if (Period1Lenght < Period2Lenght)
	{
		while (IsDate1BeforeDate2(Period1.StratDate, Period1.EndDate))
		{
			if (IsDateInPeriod(Period1.StratDate, Period2))
			
			   CountOverLap++;
				Period1.StratDate = IncreasingDateByOne(Period1.StratDate);
			

		}

	}
	else
	{
		while (IsDate1BeforeDate2(Period2.StratDate, Period2.EndDate))
		{
			if (IsDateInPeriod(Period2.StratDate, Period1))
				CountOverLap++;
			Period2.StratDate = IncreasingDateByOne(Period2.StratDate);
		}
	}
	return CountOverLap;


}


short ReadYear()
{
	int Year;
	cout << " Please enter number  Of Year ? \n";
	cin >> Year;
	return Year;
}
short ReadMonth()
{
	short Month;
	cout << "please enetr number of month ?\n";
	cin >> Month;
	return Month;
}

short ReadDay()
{
	short Day;
	cout << " please enter number of day ? \n";
	cin >> Day;
	return Day;
}


sDate ReadFullDate()
{
	sDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}


stPeriod RaedPeriod()
{
	stPeriod Period;
	cout << "  Start date:\n";
	Period.StratDate = ReadFullDate();
	cout << " End date :\n";
	
	Period.EndDate = ReadFullDate();

	return Period;
}
int main()
{
	cout << " \n **** Period 1 **** ? \n";
	stPeriod Period1 = RaedPeriod();
	//-------------------//
	cout << " \n ***** Peroid  2  **** ? \n";
	stPeriod Period2 = RaedPeriod();

	cout << "overlap Days Count is  " << CountOverLapsDays(Period1, Period2);






	system("pause>0");

	return 0;
}

