// ConsoleApplication4.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


#pragma warning (disable : 4996);
#include <iostream>


#include <ctime>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;

};
short ReadYear()
{
	int Year;
	cout << " Please enter number  Of Year ? \n";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Month = 0;
	cout << "Please enter Number Of Month ? \n ";
	cin >> Month;
	return Month;
}


bool IsLeapYear(int Number)
{

	return (Number % 4 == 0 && Number % 100 != 0 || Number % 400 == 0);


}
short NumberOfDaysInMonth(short month, short year)
{
	if (month < 1 || month > 12)

		return 0;

	int NumbersOFDay[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return  (month == 2) ? (IsLeapYear(year) ? 29 : 28) : NumbersOFDay[month - 1];

}

bool IsLastDay(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));

}

bool IsLastMonth(short Month)
{
	return (Month == 12);
}


bool IsDate1BeforeDate2(sDate Date1, sDate Date2)
{

	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
		(Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);

}
sDate IncreasingDateByOne(sDate Date)
{
	if (IsLastDay(Date))
	{
		if (IsLastMonth(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}

	}
	else
	{
		Date.Day++;
	}

	return Date;

}

short DayOFWeekOrder(short Day, short Month, short Year)

{



	short a, y, m, d;

	a = (14 - Month) / 12;

	y = Year - a;

	m = Month + (12 * a) - 2;

	d = (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;

	return d;


}
int GetDifferncesInDate(sDate Date1, sDate Date2, bool InCludingLastDay = false)
{
	int Days = 0;
	while (IsDate1BeforeDate2(Date1,Date2))
	{
		Days++;
		Date1 = IncreasingDateByOne(Date1);
		
	}
	return InCludingLastDay ? ++Days : Days;
}
short DayOfWeekOrder(sDate Date)
{
	return DayOFWeekOrder(Date.Day, Date.Month, Date.Year);

}

string  DayOFWeekName(short DayOfWeekOrder)
{
	string DaysOfWeek[] = { "Sun" , "Mon" , " Tues" , " Wed" ," Thu" , "Fri", " Sat" };

	return DaysOfWeek[DayOfWeekOrder];
}



bool IsEndOfWeek(sDate Date)
{
	return DayOfWeekOrder(Date) == 6;
}

bool IsWeekEndDay(sDate Date)
{
	short EndDay = DayOfWeekOrder(Date);
	return (EndDay == 4 || EndDay == 5);
}

bool IsBusinessDay(sDate Date)
{
	return !IsWeekEndDay(Date);
}

short DaysUntillEndOfWeek(sDate Date)
{
	return 6 - DayOfWeekOrder(Date);
}

short DaysUntillEndOfMonth(sDate Date)
{
	sDate EndOfMonth;

	EndOfMonth.Day = NumberOfDaysInMonth(Date.Month, Date.Year);
	EndOfMonth.Month = Date.Month;
	EndOfMonth.Year = Date.Year;

	return GetDifferncesInDate(Date, EndOfMonth, true);

}

short DaysUntillEndOfYear(sDate Date)

{
	sDate EndOfYear;
	EndOfYear.Day = 31;
	EndOfYear.Month = 12;
	EndOfYear.Year = Date.Year;

	return GetDifferncesInDate(Date, EndOfYear, true);
}
sDate GetSystemDate()
{
	sDate Date;

	time_t t = time(0);
	tm* now = localtime(&t);

	Date.Year = now->tm_year + 1900;
	Date.Month = now->tm_mon + 1;
	Date.Day = now->tm_mday;
	return Date;
	
	
}
int main()
{

	sDate Date;

	Date = GetSystemDate();

	cout << " Today is " << DayOFWeekName(DayOfWeekOrder(Date)) <<endl;

	cout << " Date is " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	cout << " Is end of wweek ?\n";
		if (IsEndOfWeek(Date))
			cout << " yes , it is end of week ;\n";
		else
			cout << " no , it not is end of week \n";
		//------------------------------//

		cout << " is Weekend Day ?\n";
		if (IsWeekEndDay(Date))
			cout << " yes , it is weekend :\n";
		else
			cout << "No , it is not weekend :\n ";
		//------------------------//

		cout << " Is it busniss  day ?\n";
		if (IsBusinessDay(Date))
			cout << " Yes ,It is busniss day :\n";
		else
			cout << "No, It is Not Busneiss Day :\n";

		//---------------------------//

		cout << " Days Untill End of week : " << DaysUntillEndOfWeek(Date) << " Days" <<endl;

		//--------------------------//


		cout << " Days untill End of month : " << DaysUntillEndOfMonth(Date) << " Days" << endl;
		//---------------------------//

		cout << " Days untill end of year : " << DaysUntillEndOfYear(Date)  << " Days" << endl;

	


	



	system("pause>0");

	return 0;
}