

#include <iostream>


using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;

};
short ReadYear()
{
	int Year;
	cout << " Please enter number  Of Year ? \n";
	cin >> Year;
	return Year;
}
short ReadMonth()
{
	short Month;
	cout << "please enetr number of month ?\n";
	cin >> Month;
	return Month;
}

short ReadDay()
{
	short Day;
	cout << " please enter number of day ? \n";
	cin >> Day;
	return Day;
}


sDate ReadFullDate()
{
	sDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}



bool IsLeapYear(int Number)
{

	return (Number % 4 == 0 && Number % 100 != 0 || Number % 400 == 0);


}

short NumberOfDaysInMonth(short Month, short Year)
{
	if (Month < 1 || Month > 12)
	{
		return 0;
	}

	int DaysOfMonth[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	for (short i = 1; i <= 12; i++)
	{
		return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : DaysOfMonth[Month - 1];



	}
}



short NumberOfDaysFromBagainingOfYear(short Day, short Month, short Year)
{
	short TotalDays = 0;

	for (int i = 1; i <= Month - 1; i++)
	{

		TotalDays += NumberOfDaysInMonth(i, Year);


	}

	TotalDays += Day;

	return TotalDays;
}


bool IsLastDay(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));

}

bool IsLastMonth(short Month)
{
	return (Month == 12);
}



sDate IncreasingDateByOne(sDate Date)
{
	if (IsLastDay(Date))
	{
		if (IsLastMonth(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}

	}
	else
	{
		Date.Day++;
	}

	return Date;

}


bool IsDate1EqualsDate2(sDate Date1, sDate Date2)
{

	

	return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;

}


bool IsDate1BeforeDate2(sDate Date1, sDate Date2)
{

	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
		(Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);




}
bool IsDate1AfterDate2(sDate Date1, sDate Date2)
{
	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualsDate2(Date1, Date2));
}

struct stPeriod
{
	sDate StratDate;
	sDate EndDate;

};

int GetDiffranceBetweenDate1AndDate2(sDate Date1, sDate Date2, bool EnculdeEndDay = false)
{
	int Days = 0;
	while (IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreasingDateByOne(Date1);



	}
	return (EnculdeEndDay) ? ++Days : Days;
}


int PeriodLenghtInDays(stPeriod Period, bool IncludeLastDay = false)
{
	return GetDiffranceBetweenDate1AndDate2(Period.StratDate, Period.EndDate ,IncludeLastDay);
}


stPeriod RaedPeriod()
{
	stPeriod Period;
	cout << "  Start date:\n";
	 Period.StratDate = ReadFullDate();
	 cout << " End date :\n";
	 Period.EndDate = ReadFullDate();

	 return Period;
}
int main()
{
	cout << " \n **** Period 1 **** ? \n";
	stPeriod Period1 = RaedPeriod();
	
	
	cout << "\n Period Lenght whithout Last day : " << PeriodLenghtInDays(Period1)<<endl;

	cout << " \n Period lenght whith last day : " << PeriodLenghtInDays(Period1, true) << endl;






	system("pause>0");

	return 0;
}