
//ProgrammingAdivces.com
//Mohammed Abu-Hadhoud
#pragma warning(disable : 4996)
#pragma once

#include<iostream>
#include<string>
#include<ctime>
#include "clsString.h"


using namespace std;

class clsDate
{
private:
	short _Day = 1;
	short _Month = 1;
	short _Year = 1900;
	


public:
	clsDate()
	{
		time_t t = time(0);
		tm* now = localtime(&t);

		_Day = now->tm_mday ;
		_Month = now->tm_mon + 1;
		_Year = now->tm_year + 1900;
	}

	clsDate(string sDate)
	{
		vector <string>vDate;
		vDate = clsString::SplitWord(sDate, "/");

		_Day = stoi(vDate[0]);
		_Month = stoi(vDate[1]);
		_Year = stoi(vDate[2]);
	}

	clsDate(short Day, short Month, short Year)
	{
		_Day = Day;
		_Month = Month;
		_Year = Year;

	}

	/*clsDate(short DateOrderInYear , short Year)

	{


	}*/

	void SetDay(short Day)
	{

		 _Day = Day;
    }
	short GetDay()
	{
		return _Day;
	}

	__declspec(property (put = SetDay, get = GetDay)) short Day;

	void SetMonth(short Month)
	{
		_Month = Month;

	}
	short GetMonth()
	{
		return _Month;
	}

	__declspec(property(put = SetMonth, get = GetMonth)) short Month;

	void SetYear(short Year)
	{
		_Year = Year;

	}

	short GetYear()
	{
		return _Year;
	}

	__declspec(property (put = SetYear, get = GetYear)) short Year;

	static clsDate GetSystemDate()
	{
		time_t t = time(0);
		tm* now = localtime(&t);
		short Day, Month, Year;
		Day = now->tm_mday;
		Month = now->tm_mon + 1;
		Year = now->tm_year + 1900;

		return clsDate(Day, Month, Year);
	}

	void Print()
	{
		cout << DateToString() << endl;
	}

	static string DateToString(clsDate Date)
	{
		return to_string(Date.Day) + "/" + to_string(Date.Month) + " /" + to_string(Date.Year);
	}

	string DateToString()
	{
		return DateToString(*this);
	}


	

	static bool IsLeapYear(short Number)
	{

		return (Number % 4 == 0 && Number % 100 != 0 || Number % 400 == 0);


	}
	bool IsLeap()
	{
		return IsLeapYear(_Year);
	}

	

	 static short NumbersOfDaysInYear(short year)
	{
		return (IsLeapYear(year) ? 366 : 365);
	}
	short NumbersOfDaysInYear()
	{
		return NumbersOfDaysInYear(_Year);
	}
	static short NumbersOfHoursInYear(short year)
	{
		return (NumbersOfDaysInYear(year) * 24);
	}
	short NumbersOfHoursInYear()
	{
		return (NumbersOfDaysInYear(_Year) * 24);
	}

	static short NumbersOfMinutesInYear(short year)
	{
		return (NumbersOfHoursInYear(year) * 60);
	}
	short NumbersOfMinutesInYear()
	{
		return (NumbersOfHoursInYear(_Year) * 60);
	}
	static short NumbersOfSecondsInYear(short year)
	{
		return (NumbersOfMinutesInYear(year) * 60);
	}
	 short NumbersOfSecondsInYear()
	{
		return (NumbersOfMinutesInYear(_Year) * 60);
	}


	 static short NumbersOfDaysInMonth(short month, short year)
	 {
		 if (month < 1 || month > 12)
		 {
			 return 0;
		 }
		 if (month == 2)
		 {
			 return	IsLeapYear(year) ? 29 : 28;
		 }
		 short arry31Days[7] = { 1,3,5,6,7,9,11 };
		 for (short i = 1; i <= 7; i++)
		 {
			 if (arry31Days[i - 1] == month)
			 {
				 return 31;

			 }

		 }
		 return 30;
	 }

	 short NumbersOfDaysInMonth()
	 {
		 return  NumbersOfDaysInMonth(_Year, _Month);
	 }

	 static int NumbersOfHoursInMonth(short year, short month)
	 {
		 return NumbersOfDaysInMonth(year, month) * 24;
	 }

	 int NumbersOfHoursInMonth()
	 {
		 return NumbersOfDaysInMonth(_Year, _Month) * 24;
	 }

	 static int NumbersOfMinutesInMonth(short year, short month)
	 {
		 return NumbersOfHoursInMonth(year, month) * 60;
	 }
	 int NumbersOfMinutesInMonth()
	 {
		 return NumbersOfHoursInMonth(_Year, _Month) * 60;
	 }
	 static int NumbersOfSecondsInMonth(short year, short month)
	 {
		 return NumbersOfMinutesInMonth(year, month) * 60;
	 }
	 int NumbersOfSecondsInMonth()
	 {
		 return NumbersOfMinutesInMonth(_Year, _Month) * 60;
	 }

	 static short DayOfWeekOrder(short Day, short Month, short Year)
	 {
		 short a, y, m;
		 a = (14 - Month) / 12;
		 y = Year - a;
		 m = Month + (12 * a) - 2;
		 // Gregorian:
		 //0:sun, 1:Mon, 2:Tue...etc
		 return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
	 }

	 short DayOfWeekOrder()
	 {
		 return DayOfWeekOrder(_Day, _Month, _Year);
	 }
	 static string DayShortName(short DayOfWeekOrder)
	 {
		 string arrDayNames[] = { "Sun","Mon","Tue","Wed","Thu","Fri","Sat" };

		 return arrDayNames[DayOfWeekOrder];

	 }

	 string DayShortName()
	 {
		 string arrDayNames[] = { "Sun","Mon","Tue","Wed","Thu","Fri","Sat" };

		 return arrDayNames[DayOfWeekOrder(_Day, _Month, _Year)];

	 }

	 static string  MonthShortName(short Month)
	 {
		 string Montharry[12] = { "Jan" , " Feb" , "Mar ", "Apr", " May" ,
							 "June" , "July" , " Aug","Sep",
							  "Oct" ," Nov" , "Dec" };

		 return (Montharry[(Month - 1)]);
	 }

	 string MonthShortName()
	 {
		 return MonthShortName(_Month);
	 }

	 static void MonthCalendar(short Month, short Year)
	 {
		 int NumberOfDays;
		 int Current;
		 Current = DayOfWeekOrder(1, Month, Year);

		 NumberOfDays = NumbersOfDaysInMonth(Month, Year);



		 printf("\n ____________________%s_____________________\n", MonthShortName(Month).c_str());

		 printf("  Sun  Mon  Tus  Wed  Thu  Fri  Sat  \n ");

		 int i = 0;
		 for (i = 0; i < Current; i++)

			 printf("    ");

		 for (int j = 1; j <= NumberOfDays; j++)
		 {
			 printf("%5d", j);
			 if (++i == 7)
			 {
				 i = 0;
				 printf("\n");
			 }


		 }
		 printf("\n______________________________________\n");



	 }

	 void MonthCalendar()
	 {
		 MonthCalendar(_Month, _Year);
	 }

	 static void YearCalender(short Year)
	 {
		 printf("\n _________________________________________\n");
		 printf("\n         Calendar -%d ", Year);
		 printf("\n_________________________________________\n");

		 for (int i = 1; i <= 12; i++)
		 {
			 MonthCalendar(i, Year);

		 }
		 return;
	 }
	 void YearCalender()
	 {
		 YearCalender(_Year);
	 }

	 static short NumberOfDaysFromBagainingOfYear(short Day, short Month, short Year)
	 {
		 short TotalDays = 0;

		 for (int i = 1; i <= Month - 1; i++)
		 {

			 TotalDays += NumbersOfDaysInMonth(i, Year);


		 }

		 TotalDays += Day;

		 return TotalDays;
	 }
	 short NumberOfDaysFromBagainingOfYear()
	 {
		 return NumberOfDaysFromBagainingOfYear(_Day, _Month, _Year);
	 }

	 static clsDate GetDateFromDayOrderInYear(short DataOrderInYear, short Year)
	 {
		 clsDate Date;
		 short ReminaingDays = DataOrderInYear;
		 short MonthDays = 0;

		 Date.Year = Year;
		 Date.Month = 1;

		 while (true)
		 {
			 MonthDays =NumbersOfDaysInMonth(Date.Month, Year);
			 if (ReminaingDays > MonthDays)
			 {
				 ReminaingDays -= MonthDays;
				 Date.Month++;


			 }
			 else
			 {
				 Date.Day = ReminaingDays;
				 break;
			 }

		 }
		 return Date;
	 }

	 void AddDay(short Days)
	 {

		 short ReminaingDays = Days + NumberOfDaysFromBagainingOfYear(_Day, _Month, _Year);
		 short MonthDays = 0;



		 _Month = 1;

		 while (true)
		 {
			 MonthDays = NumbersOfDaysInMonth(_Month, _Year);
			 if (ReminaingDays > MonthDays)
			 {
				 ReminaingDays -= MonthDays;
				 _Month++;

				 if (_Month > 12)
				 {
					 _Month = 1;
					 _Year++;




				 }



			 }

			 else
			 {
				 _Day = ReminaingDays;
				 break;
			 }

		 }
		 
	 }


	 static bool DateOneLessThanDateTwo(clsDate Date1, clsDate Date2)
	 {

		 return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
			 (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);

	 }

	 bool IsDateLessThanDateTwo(clsDate Date2)
	 {
		 return DateOneLessThanDateTwo(*this, Date2);
	 }

	static bool DateOneEqualDateTwo(clsDate Date1, clsDate Date2)
	 {

		 //return (Date1.Year == Date2.Year && Date1.Month == Date2.Month && Date1.Day == Date2.Day)? true : false;   ## MyAnswer #

		 return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;

	 }

	bool IsDateEqualDateTwo(clsDate Date2)
	{
		return DateOneEqualDateTwo(*this, Date2);
	}

	static bool IsLastDayInMonth(clsDate Date1)
	{
		return (Date1.Day == NumbersOfDaysInMonth(Date1.Month, Date1.Year));

	}

	bool IsLastDayInMonth()
	{
		return IsLastDayInMonth(*this);
	}

	static bool IsLastMonth(short Month)
	{
		return (Month == 12);
	}

	

	static clsDate AddOneDay(clsDate Date)
	{
		if (IsLastDayInMonth(Date))
		{
			if (IsLastMonth(Date.Month))
			{
				Date.Day = 1;
				Date.Month = 1;
				Date.Year++;

			}
			else
			{
				Date.Day = 1;
				Date.Month++;
			}

		}
		else
		{
			Date.Day++;
		}

		return Date;

	}

	void AddOneDay()
	{
		*this = AddOneDay(*this);
	}

	static void SwapDates(clsDate Date1, clsDate Date2)
	{
		clsDate Temp;

		Temp = Date1;
		Date1 = Date2;
		Date2 = Temp;
	}

	static int GetDifferenceInDays(clsDate Date1, clsDate Date2, bool EnculdeEndDay = false)
	{
		int Days = 0;
		short SweapFlagValue = 1;
		if (!DateOneLessThanDateTwo(Date1, Date2))
		{
			SwapDates(Date1, Date2);
			SweapFlagValue = -1;

		}
		while (DateOneLessThanDateTwo(Date1, Date2))
		{
			Days++;
			Date1 = AddOneDay(Date1);



		}
		return EnculdeEndDay ? ++Days * SweapFlagValue : Days * SweapFlagValue;

	}

	int GetDifferenceInDays(clsDate Date2, bool InculdeLastDay = false)
	{
		return GetDifferenceInDays( *this,Date2,InculdeLastDay);
	}

	static int GetYourAge(clsDate DateOfBrith)
	{

		return GetDifferenceInDays(DateOfBrith, clsDate::GetSystemDate(), true);
	}

	// Increasing days


	static clsDate IncreasingDateByOneWeek(clsDate & Date)
	{
		for (int i = 1; i <= 7; i++)
		{
			Date = AddOneDay(Date);

		}

		return Date;
	}

	void IncreasingDateByOneWeek()
	{
		IncreasingDateByOneWeek(*this);
	}
	
	clsDate static IncreasingDateByXWeek(clsDate& Date, short Weeks)
	{
		for (int i = 1; i <= 7; i++)
		{
			Date = IncreasingDateByOneWeek(Date);

		}
		return Date;
	}
	void IncreasingDateByXWeek(short Weeks)
	{
		 IncreasingDateByXWeek(*this, Weeks);
	}

	
	static clsDate IncreasingDateByOneMonth(clsDate& Date)
	{
		if (Date.Month == 12)

		{
			Date.Year++;
			Date.Month = 1;

		}
		else
		{
			Date.Month++;
		}

		short NumberOfDaysInCurrentMonth = NumbersOfDaysInMonth(Date.Month, Date.Year);
		if (Date.Day > NumberOfDaysInCurrentMonth)
		{
			Date.Day = NumberOfDaysInCurrentMonth;

		}

		return Date;
	}


		void IncreasingDateByOneMonth()
		{
			IncreasingDateByOneMonth(*this);
		}


		

		

	static clsDate IncreasingDateByXMonth(clsDate& Date, short XMonth)
	{
		for (int i = 1; i <= XMonth; i++)
		{
			Date = IncreasingDateByOneMonth(Date);
		}

		return Date;
	}

	void IncreasingDateByXMonth(short Month)
	{
		IncreasingDateByXMonth(*this, Month);
	}


	
	static clsDate IncreasingDateByOneYear(clsDate& Date)
	{
		Date.Year++;

		return Date;
	}

	void IncreasingDateByOneYear()
	{
		IncreasingDateByOneYear(*this);
	}


	
	
	static clsDate IncreasingDateByXYear(clsDate &Date, short xYear)
	{
		for (int i = 1; i <= xYear; i++)
		{
			Date = IncreasingDateByOneYear(Date);
		}

		return Date;
	}

	void IncreasingDateByXYear(short XYear)
	{
		IncreasingDateByXYear(*this,XYear);
	}


	
	
	static clsDate IncreasingDateByOneDecade(clsDate &Date)
	{
		Date.Year += 10;

		return Date;
	}

	void IncreasingDateByOneDecade()
	{
		IncreasingDateByOneDecade(*this);
	}
	


	
	static clsDate IncreasingDateByXDecade(clsDate& Date, short Decade)
	{
		Date.Year += Decade * 10;

		return Date;
	}

	void IncreasingDateByXDecade(short Decades)
	{
		IncreasingDateByXDecade(*this, Decades);
	}
	
	static clsDate IncreasingDateByOneCentury(clsDate &Date)
	{
		Date.Year += 100;

		return Date;
	}

	void IncreasingDateByOneCentury()
	{
		IncreasingDateByOneCentury(*this);
	}
	
	static clsDate IncreasingDateByMillennium(clsDate Date)
	{
		Date.Year += 1000;

		return Date;
	}

	void IncreasingDateByMillennium()
	{
		IncreasingDateByMillennium(*this);
	}

	// Decreasing

	
 	static clsDate DecreasingDateByOneDay(clsDate& Date)
	{
		if (Date.Day == 1)
		{
			if (Date.Month == 1)
			{
				Date.Day = 31;
				Date.Month = 12;
				Date.Year--;

			}
			else
			{
				Date.Day = NumbersOfDaysInMonth(Date.Month, Date.Year);
				Date.Month--;
			}

		}
		else
		{
			Date.Day--;
		}

		return Date;

	}

	void DecreasingDateByOneDay()
	{
		DecreasingDateByOneDay(*this);
	}


	
	/*
	static clsDate DecreasingDateByXDays(clsDate& Date, short XDays)
	{
		for (int i = 1; i <= XDays; i++)
		{
			Date = DecreasingDateByOneDay(Date);

		}

		return Date;
	}

	void DecreasingDateByXDays( short XDays)
	{
		DecreasingDateByXDays(*this, XDays);
	}*/


	
	static clsDate DecreasingDateByWeek(clsDate& Date)
	{
		for (int i = 1; i <= 7; i++)
		{
			Date = DecreasingDateByOneDay(Date);

		}

		return Date;
	}

	void DecreasingDateByWeek()

	{
		DecreasingDateByWeek(*this);
	}
	
	static clsDate DecreasingDateByXWeek(clsDate &Date, short Weeks)
	{
		for (int i = 1; i <= Weeks; i++)
		{
			Date = DecreasingDateByWeek(Date);

		}
		return Date;
	}
	void DecreasingDateByXWeek(short  XWeeks)
	{
		DecreasingDateByXWeek(*this, XWeeks);
	}
	

   static	clsDate DecreasingDateByOneMonth(clsDate &Date)
	{
		if (Date.Month == 1)

		{
			Date.Year--;
			Date.Month = 12;

		}
		else
		{
			Date.Month--;
		}

		short NumberOfDaysInCurrentMonth = NumbersOfDaysInMonth(Date.Month, Date.Year);
		if (Date.Day > NumberOfDaysInCurrentMonth)
		{
			Date.Day = NumberOfDaysInCurrentMonth;

		}

		return Date;
	}

   void DecreasingDateByOneMonth()
   {
	   DecreasingDateByOneMonth(*this);
   }


	
	static clsDate DecreasingDateByXMonth(clsDate& Date, short xMonth)
	{
		for (int i = 1; i <= xMonth; i++)
		{
			Date = DecreasingDateByOneMonth(Date);
		}

		return Date;
	}

	void DecreasingDateByXMonth( short XMonth)
	{
		DecreasingDateByXMonth(*this, XMonth);
	}
	

	static clsDate DecreasingDateByYear(clsDate& Date)
	{
		Date.Year--;

		return Date;
	}
	void DecreasingDateByYear()
	{
		DecreasingDateByYear(*this);
	}

	
	static clsDate DecreasingDateByXYear(clsDate& Date, short xYear)
	{
		for (int i = 1; i <= xYear; i++)
		{
			Date = DecreasingDateByYear(Date);
		}

		return Date;
	}
	void DecreasingDateByXYear(short XYear)
	{
		DecreasingDateByXYear(*this, XYear);

	}
	
	
 	static clsDate DecreasingDateByDecade(clsDate &Date)
	{
		Date.Year -= 10;

		return Date;
	}

	void DecreasingDateByDecade()
	{
		DecreasingDateByDecade(*this);

	}

	
	static clsDate DecreasingDateByXDecades(clsDate &Date, short Decades)
	{
		for (int i = 1; i <= Decades * 10; i++)
		{
			Date = DecreasingDateByYear(Date);
		}

		return Date;
	}

	void DecreasingDateByXDecades(short Decades)
	{
		DecreasingDateByXDecades(*this, Decades);
	}

	
  	static clsDate DecreasingDateByXDecadeFaster(clsDate &Date, short Decade)
	{
		Date.Year -= Decade * 10;

		return Date;
	}

	void DecreasingDateByXDecadeFaster(short Decade)
	{
		DecreasingDateByXDecadeFaster(*this, Decade);

	}


	

	static clsDate DecreasingDateByOneCentury(clsDate &Date)
	{
		Date.Year -= 100;

		return Date;
	}

	void DecreasingDateByOneCentury()
	{
		DecreasingDateByOneCentury();

	}
	

	static clsDate DecreasingDateByMillennium(clsDate &Date)
	{
		Date.Year -= 1000;

		return Date;
	}

	void DecreasingDateByMillennium()
	{
		DecreasingDateByMillennium(*this);
	}


	static bool IsEndOfWeek(clsDate Date)
	{
		return DayOfWeekOrder(Date.Day,Date.Month,Date.Year) == 6;
	}

	bool IsEndOfWeek()
	{
		return IsEndOfWeek(*this);
	}



 	static bool IsWeekEndDay(clsDate Date)
	{
		short EndDay = DayOfWeekOrder(Date.Day,Date.Month,Date.Year);
		return (EndDay == 4 || EndDay == 5);
	}

	bool IsWeekEndDay()
	{
		return IsWeekEndDay(*this);
	}

	static bool IsBusinessDay(clsDate Date)
	{
		return !IsWeekEndDay(Date);
	}

	bool IsBusinessDay()
	{
		return IsBusinessDay(*this);
	}


	static short DaysUntillEndOfWeek(clsDate Date)
	{
		return 6 - DayOfWeekOrder(Date.Day,Date.Month,Date.Year);
	}


	short DaysUntillEndOfWeek()
	{
		return DaysUntillEndOfWeek(*this);
	}

	
	static short DaysUntillEndOfMonth(clsDate Date)
	{
		clsDate EndOfMonth;

		EndOfMonth.Day = NumbersOfDaysInMonth(Date.Month, Date.Year);
		EndOfMonth.Month = Date.Month;
		EndOfMonth.Year = Date.Year;

		return GetDifferenceInDays(Date, EndOfMonth, true);

	}

	short DaysUntillEndOfMonth()
	{
		return DaysUntillEndOfMonth(*this);
	}

	static short DaysUntillEndOfYear(clsDate Date)

	{
		clsDate EndOfYear;
		EndOfYear.Day = 31;
		EndOfYear.Month = 12;
		EndOfYear.Year = Date.Year;

		return GetDifferenceInDays(Date, EndOfYear, true);
	}

	short DaysUntillEndOfYear()
	{
		return DaysUntillEndOfYear(*this);
	}



	static int GetBuinessDays(clsDate DateFrom, clsDate DateTo)
	{
		int Days = 0;

		while (DateOneLessThanDateTwo(DateFrom, DateTo))
		{
			if (IsBusinessDay(DateFrom))

				Days++;
			DateFrom = AddOneDay(DateFrom);





		}

		return Days;

	}

	static int GetVactionsDays(clsDate DateFrom, clsDate DateTo)
	{
		int Days = 0;

		while (DateOneLessThanDateTwo(DateFrom, DateTo))
		{
			if (!IsBusinessDay(DateFrom))

				Days++;
			DateFrom = AddOneDay(DateFrom);





		}

		return Days;

		//return GetBuinessDays(DateFrom, DateTo);



	}

	// from here answer teacher

	/*static clsDate CalculateVacationReturnDate(clsDate DateFrom, short VacationDays)
	{

		short WeekEndCounter = 0;

		for (short i = 1; i <= VacationDays; i++)
		{

			if (IsWeekEnd(DateFrom))
				WeekEndCounter++;

			DateFrom = AddOneDay(DateFrom);
		}
		//to add weekends 
		for (short i = 1; i <= WeekEndCounter; i++)
			DateFrom = AddOneDay(DateFrom);

		return DateFrom;
	}

	static bool IsDate1AfterDate2(clsDate Date1, clsDate Date2)
	{
		return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualDate2(Date1, Date2));

	}

	bool IsDateAfterDate2(clsDate Date2)
	{
		return IsDate1AfterDate2(*this, Date2);
	}

	enum enDateCompare { Before = -1, Equal = 0, After = 1 };

	static enDateCompare CompareDates(clsDate Date1, clsDate Date2)
	{
		if (IsDate1BeforeDate2(Date1, Date2))
			return enDateCompare::Before;

		if (IsDate1EqualDate2(Date1, Date2))
			return enDateCompare::Equal;

		// if (IsDate1AfterDate2(Date1,Date2))
			// return enDateCompare::After;

			 //this is faster
		return enDateCompare::After;

	}

	enDateCompare CompareDates(clsDate Date2)
	{
		return CompareDates(*this, Date2);
	}
	*/

	








};

